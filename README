Compiler for C--
Uses BNFC generated files from cmm.cf
CS441G-001 Fall 2016
JWJ CS UK Copyright CS-JWJ 2016
Do not distribute

USAGE:
  # Build the compiler cmm2pstack:
  make

Note that test files are in TESTS so they may need to be moved to the current directory
  # Compile fib.cmm, producing fib.apm:
  ./cmm2pstack fib.cmm fib.apm

  # Disassemble fib.apm:
  ./pstack/apd fib
  # Execute fib.apm:
  ./pstack/api fib
  # Assemble from P-code is *.aa 
  ./pstack apm fib

Note: 
  # Execute fib.apm with debugging information:
  ./pstack/api fib -d

BUILT-IN-FUNCTIONS:
  The cmm standard library contains three functions:

  exit()      : ends the program immediately
  puts("...") : prints a string (only literal strings are supported)
  putn(num)   : prints an integer (like printf("\t%d\n", num))

Note that function calls are not checked for number and type of
arguments: giving the wrong number is likely to smash the stack.
All functions return a value.

Functions with multiple arguments are not parsed correctly - this is because of cmm.cf grammar
allows for "int a, b, c" declarations that cause problems in fuction arguments.

===========================================================================================
FILES
README
cmm.cf       #C-- grammar

### files generated with BNFC from cmm.cf
Absyn.C
Absyn.H
cmm.l
cmm.y
Lexer.C
Parser.C
Parser.H

###provided by JWJ CS UK -- do not distribute
Makefile
pstack/      # api, apm, apd, apm.h, etc.
main.cc
codegen.cc   # code generator - visits Absyn AST generated by BNFC
codegen.h
pstcode.cc    # prolog to load library with putn, puts
pstcode.h
symbtable.cc  # a stack of symbol tables
cmm2pstack*   #compiler for cmm.cf programs
TESTS/        #sample programs
